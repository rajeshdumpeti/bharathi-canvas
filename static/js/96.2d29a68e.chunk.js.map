{"version":3,"file":"static/js/96.2d29a68e.chunk.js","mappings":"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","sources":["../node_modules/marked/src/defaults.ts","../node_modules/marked/src/rules.ts","../node_modules/marked/src/helpers.ts","../node_modules/marked/src/Tokenizer.ts","../node_modules/marked/src/Lexer.ts","../node_modules/marked/src/Renderer.ts","../node_modules/marked/src/TextRenderer.ts","../node_modules/marked/src/Parser.ts","../node_modules/marked/src/Hooks.ts","../node_modules/marked/src/marked.ts","../node_modules/marked/src/Instance.ts"],"sourcesContent":["import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults<ParserOutput = string, RendererOutput = string>(): MarkedOptions<ParserOutput, RendererOutput> {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null,\n  };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport let _defaults: MarkedOptions<any, any> = _getDefaults();\n\nexport function changeDefaults<ParserOutput = string, RendererOutput = string>(newDefaults: MarkedOptions<ParserOutput, RendererOutput>) {\n  _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null } as unknown as RegExp;\n\nfunction edit(regex: string | RegExp, opt = '') {\n  let source = typeof regex === 'string' ? regex : regex.source;\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      let valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(other.caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    },\n  };\n  return obj;\n}\n\nexport const other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: (bull: string) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n\n/**\n * Block-Level Grammar\n */\n\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/\\|table/g, '') // table not in commonmark\n  .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n  .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\[\\s\\S]|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n  .replace('label', _blockLabel)\n  .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n  .getRegex();\n\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n  .replace(/bull/g, bullet)\n  .getRegex();\n\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n  + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit(\n  '^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n+ ')', 'i')\n  .replace('comment', _comment)\n  .replace('tag', _tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst paragraph = edit(_paragraph)\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n  .replace('paragraph', paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nconst blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText,\n};\n\ntype BlockKeys = keyof typeof blockNormal;\n\n/**\n * GFM Block Grammar\n */\n\nconst gfmTable = edit(\n  '^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockGfm: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('table', gfmTable) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex(),\n};\n\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nconst blockPedantic: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', _comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', lheading)\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .replace('|tag', '')\n    .getRegex(),\n};\n\n/**\n * Inline-Level Grammar\n */\n\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n  .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^\\[\\]]*?\\]\\((?:\\\\[\\s\\S]|[^\\\\\\(\\)]|\\((?:\\\\[\\s\\S]|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<(?! )[^<>]*?>/g;\n\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\nconst emStrongRDelimAstCore =\n  '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\n\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n  .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit(\n  '^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n+ '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n  .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n  .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n  .getRegex();\n\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit(\n  '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n  .replace('comment', _inlineComment)\n  .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst _inlineLabel = /(?:\\[(?:\\\\[\\s\\S]|[^\\[\\]\\\\])*\\]|\\\\[\\s\\S]|`[^`]*`|[^\\[\\]\\\\`])*?/;\n\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n  .replace('label', _inlineLabel)\n  .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n  .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n  .getRegex();\n\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n  .replace('label', _inlineLabel)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n  .replace('reflink', reflink)\n  .replace('nolink', nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\nconst inlineNormal = {\n  _backpedal: noopTest, // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest,\n};\n\ntype InlineKeys = keyof typeof inlineNormal;\n\n/**\n * Pedantic Inline Grammar\n */\n\nconst inlinePedantic: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n};\n\n/**\n * GFM Inline Grammar\n */\n\nconst inlineGfm: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n    .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\[\\s\\S]|[^\\\\])*?(?:\\\\[\\s\\S]|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\nconst inlineBreaks: Record<InlineKeys, RegExp> = {\n  ...inlineGfm,\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex(),\n};\n\n/**\n * exports\n */\n\nexport const block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic,\n};\n\nexport const inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic,\n};\n\nexport interface Rules {\n  other: typeof other\n  block: Record<BlockKeys, RegExp>\n  inline: Record<InlineKeys, RegExp>\n}\n","import { other } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeReplacements: { [index: string]: string } = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (other.escapeTest.test(html)) {\n      return html.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html)) {\n      return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(other.unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nexport function cleanUrl(href: string) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, '%');\n  } catch {\n    return null;\n  }\n  return href;\n}\n\nexport function splitCells(tableRow: string, count?: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n\n  return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  findClosingBracket,\n} from './helpers.ts';\nimport type { Rules } from './rules.ts';\nimport type { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens, Token } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer, rules: Rules): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n\n  lexer.state.inLink = true;\n  const token: Tokens.Link | Tokens.Image = {\n    type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer.inlineTokens(text),\n  };\n  lexer.state.inLink = false;\n  return token;\n}\n\nfunction indentCodeCompensation(raw: string, text: string, rules: Rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(rules.other.beginningSpace);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  rules!: Rules; // set by the lexer\n  lexer!: _Lexer<ParserOutput, RendererOutput>; // set by the lexer\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0],\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text,\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n        text,\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: rtrim(cap[0], '\\n'),\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], '\\n').split('\\n');\n      let raw = '';\n      let text = '';\n      const tokens: Token[] = [];\n\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          // get lines up to a continuation\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n\n        const currentRaw = currentLines.join('\\n');\n        const currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n          .replace(this.rules.other.blockquoteSetextReplace2, '');\n        raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\\n${currentText}` : currentText;\n\n        // parse blockquote lines as top level tokens\n        // merge paragraphs if this is a continuation\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n\n        // if there is no continuation then we are done\n        if (lines.length === 0) {\n          break;\n        }\n\n        const lastToken = tokens.at(-1);\n\n        if (lastToken?.type === 'code') {\n          // blockquote continuation cannot be preceded by a code block\n          break;\n        } else if (lastToken?.type === 'blockquote') {\n          // include continuation in nested blockquote\n          const oldToken = lastToken as Tokens.Blockquote;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.blockquote(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === 'list') {\n          // include continuation in nested list\n          const oldToken = lastToken as Tokens.List;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.list(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1)!.raw.length).split('\\n');\n          continue;\n        }\n      }\n\n      return {\n        type: 'blockquote',\n        raw,\n        tokens,\n        text,\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [],\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        let endEarly = false;\n        let raw = '';\n        let itemContents = '';\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t: string) => ' '.repeat(3 * t.length));\n        let nextLine = src.split('\\n', 1)[0];\n        let blankLine = !line.trim();\n\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            const rawLine = src.split('\\n', 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of html block\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        let istask: RegExpExecArray | null = null;\n        let ischecked: boolean | undefined;\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: [],\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      const lastItem = list.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        // not a list since there were no items\n        return;\n      }\n      list.raw = list.raw.trimEnd();\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (let i = 0; i < list.items.length; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (let i = 0; i < list.items.length; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0],\n      };\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title,\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n      return;\n    }\n\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n\n    const item: Tokens.Table = {\n      type: 'table',\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: [],\n    };\n\n    if (headers.length !== aligns.length) {\n      // header and align columns must be equal, rows can be different.\n      return;\n    }\n\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push('right');\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push('center');\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push('left');\n      } else {\n        item.align.push(null);\n      }\n    }\n\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i],\n      });\n    }\n\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i],\n        };\n      }));\n    }\n\n    return item;\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1]),\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0]),\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: cap[1],\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0],\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex === -2) {\n          // more open parens than closed\n          return;\n        }\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = this.rules.other.pedanticHrefTitle.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const link = links[linkString.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text,\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n      const lLength = [...match[0]].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = [...rDelim].length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        // char length can be >1 for unicode characters;\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text),\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text),\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text,\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0],\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2]),\n      };\n    }\n  }\n\n  autolink(src: string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[1];\n        href = 'mailto:' + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  url(src: string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[0];\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  inlineText(src: string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        escaped,\n      };\n    }\n  }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\nimport type { Token, TokensList, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Block Lexer\n */\nexport class _Lexer<ParserOutput = string, RendererOutput = string> {\n  tokens: TokensList;\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer<ParserOutput, RendererOutput>;\n  private inlineQueue: { src: string, tokens: Token[] }[];\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    // TokenList cannot be created in one go\n    this.tokens = [] as unknown as TokensList;\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer<ParserOutput, RendererOutput>();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true,\n    };\n\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal,\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline,\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex<ParserOutput = string, RendererOutput = string>(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const lexer = new _Lexer<ParserOutput, RendererOutput>(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline<ParserOutput = string, RendererOutput = string>(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const lexer = new _Lexer<ParserOutput, RendererOutput>(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src.replace(other.carriageReturn, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[], lastParagraphClipped?: boolean): Token[];\n  blockTokens(src: string, tokens?: TokensList, lastParagraphClipped?: boolean): TokensList;\n  blockTokens(src: string, tokens: Token[] = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n    }\n\n    while (src) {\n      let token: Tokens.Generic | undefined;\n\n      if (this.options.extensions?.block?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== undefined) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unnecessary paragraph tags\n          lastToken.raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title,\n          };\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match: RegExpExecArray | null = null;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index)\n              + '[' + 'a'.repeat(match[0].length - 2) + ']'\n              + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out blocks from extensions\n    maskedSrc = this.options.hooks?.emStrongMask?.call({ lexer: this }, maskedSrc) ?? maskedSrc;\n\n    let keepPrevChar = false;\n    let prevChar = '';\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      let token: Tokens.Generic | undefined;\n\n      // extensions\n      if (this.options.extensions?.inline?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === 'text' && lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape,\n} from './helpers.ts';\nimport { other } from './rules.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Tokens } from './Tokens.ts';\nimport type { _Parser } from './Parser.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  parser!: _Parser<ParserOutput, RendererOutput>; // set by the parser\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  space(token: Tokens.Space): RendererOutput {\n    return '' as RendererOutput;\n  }\n\n  code({ text, lang, escaped }: Tokens.Code): RendererOutput {\n    const langString = (lang || '').match(other.notSpaceStart)?.[0];\n\n    const code = text.replace(other.endingNewline, '') + '\\n';\n\n    if (!langString) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n' as RendererOutput;\n    }\n\n    return '<pre><code class=\"language-'\n      + escape(langString)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n' as RendererOutput;\n  }\n\n  blockquote({ tokens }: Tokens.Blockquote): RendererOutput {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\\n${body}</blockquote>\\n` as RendererOutput;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  def(token: Tokens.Def): RendererOutput {\n    return '' as RendererOutput;\n  }\n\n  heading({ tokens, depth }: Tokens.Heading): RendererOutput {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n` as RendererOutput;\n  }\n\n  hr(token: Tokens.Hr): RendererOutput {\n    return '<hr>\\n' as RendererOutput;\n  }\n\n  list(token: Tokens.List): RendererOutput {\n    const ordered = token.ordered;\n    const start = token.start;\n\n    let body = '';\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n\n    const type = ordered ? 'ol' : 'ul';\n    const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n' as RendererOutput;\n  }\n\n  listitem(item: Tokens.ListItem): RendererOutput {\n    let itemBody = '';\n    if (item.task) {\n      const checkbox = this.checkbox({ checked: !!item.checked });\n      if (item.loose) {\n        if (item.tokens[0]?.type === 'paragraph') {\n          item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n            item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: 'text',\n            raw: checkbox + ' ',\n            text: checkbox + ' ',\n            escaped: true,\n          });\n        }\n      } else {\n        itemBody += checkbox + ' ';\n      }\n    }\n\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n\n    return `<li>${itemBody}</li>\\n` as RendererOutput;\n  }\n\n  checkbox({ checked }: Tokens.Checkbox): RendererOutput {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\">' as RendererOutput;\n  }\n\n  paragraph({ tokens }: Tokens.Paragraph): RendererOutput {\n    return `<p>${this.parser.parseInline(tokens)}</p>\\n` as RendererOutput;\n  }\n\n  table(token: Tokens.Table): RendererOutput {\n    let header = '';\n\n    // header\n    let cell = '';\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({ text: cell as ParserOutput });\n\n    let body = '';\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n\n      cell = '';\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n\n      body += this.tablerow({ text: cell as ParserOutput });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n' as RendererOutput;\n  }\n\n  tablerow({ text }: Tokens.TableRow<ParserOutput>): RendererOutput {\n    return `<tr>\\n${text}</tr>\\n` as RendererOutput;\n  }\n\n  tablecell(token: Tokens.TableCell): RendererOutput {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? 'th' : 'td';\n    const tag = token.align\n      ? `<${type} align=\"${token.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n` as RendererOutput;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong({ tokens }: Tokens.Strong): RendererOutput {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>` as RendererOutput;\n  }\n\n  em({ tokens }: Tokens.Em): RendererOutput {\n    return `<em>${this.parser.parseInline(tokens)}</em>` as RendererOutput;\n  }\n\n  codespan({ text }: Tokens.Codespan): RendererOutput {\n    return `<code>${escape(text, true)}</code>` as RendererOutput;\n  }\n\n  br(token: Tokens.Br): RendererOutput {\n    return '<br>' as RendererOutput;\n  }\n\n  del({ tokens }: Tokens.Del): RendererOutput {\n    return `<del>${this.parser.parseInline(tokens)}</del>` as RendererOutput;\n  }\n\n  link({ href, title, tokens }: Tokens.Link): RendererOutput {\n    const text = this.parser.parseInline(tokens) as string;\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text as RendererOutput;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + (escape(title)) + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out as RendererOutput;\n  }\n\n  image({ href, title, text, tokens }: Tokens.Image): RendererOutput {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer) as string;\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape(text) as RendererOutput;\n    }\n    href = cleanHref;\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape(title)}\"`;\n    }\n    out += '>';\n    return out as RendererOutput;\n  }\n\n  text(token: Tokens.Text | Tokens.Escape): RendererOutput {\n    return 'tokens' in token && token.tokens\n      ? this.parser.parseInline(token.tokens) as unknown as RendererOutput\n      : ('escaped' in token && token.escaped ? token.text as RendererOutput : escape(token.text) as RendererOutput);\n  }\n}\n","import type { Tokens } from './Tokens.ts';\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer<RendererOutput = string> {\n  // no need for block level renderers\n  strong({ text }: Tokens.Strong): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  em({ text }: Tokens.Em): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  codespan({ text }: Tokens.Codespan): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  del({ text }: Tokens.Del): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  text({ text }: Tokens.Text | Tokens.Escape | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  link({ text }: Tokens.Link): RendererOutput {\n    return '' + text as RendererOutput;\n  }\n\n  image({ text }: Tokens.Image): RendererOutput {\n    return '' + text as RendererOutput;\n  }\n\n  br(): RendererOutput {\n    return '' as RendererOutput;\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport type { MarkedToken, Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  renderer: _Renderer<ParserOutput, RendererOutput>;\n  textRenderer: _TextRenderer<RendererOutput>;\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer<ParserOutput, RendererOutput>();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer<RendererOutput>();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse<ParserOutput = string, RendererOutput = string>(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const parser = new _Parser<ParserOutput, RendererOutput>(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline<ParserOutput = string, RendererOutput = string>(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const parser = new _Parser<ParserOutput, RendererOutput>(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): ParserOutput {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken as Tokens.Generic;\n        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'def', 'paragraph', 'text'].includes(genericToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'space': {\n          out += this.renderer.space(token);\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr(token);\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(token);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token);\n          continue;\n        }\n        case 'table': {\n          out += this.renderer.table(token);\n          continue;\n        }\n        case 'blockquote': {\n          out += this.renderer.blockquote(token);\n          continue;\n        }\n        case 'list': {\n          out += this.renderer.list(token);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token);\n          continue;\n        }\n        case 'def': {\n          out += this.renderer.def(token);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(token);\n          continue;\n        }\n        case 'text': {\n          let textToken = token;\n          let body = this.renderer.text(textToken) as string;\n          while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n            textToken = tokens[++i] as Tokens.Text;\n            body += ('\\n' + this.renderer.text(textToken));\n          }\n          if (top) {\n            out += this.renderer.paragraph({\n              type: 'paragraph',\n              raw: body,\n              text: body,\n              tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n            });\n          } else {\n            out += body;\n          }\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '' as ParserOutput;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out as ParserOutput;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer: _Renderer<ParserOutput, RendererOutput> | _TextRenderer<RendererOutput> = this.renderer): ParserOutput {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(token);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(token);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token);\n          break;\n        }\n        case 'br': {\n          out += renderer.br(token);\n          break;\n        }\n        case 'del': {\n          out += renderer.del(token);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '' as ParserOutput;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out as ParserOutput;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport class _Hooks<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  block?: boolean;\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n    'emStrongMask',\n  ]);\n\n  static passThroughHooksRespectAsync = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: ParserOutput) {\n    return html;\n  }\n\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens: Token[] | TokensList) {\n    return tokens;\n  }\n\n  /**\n   * Mask contents that should not be interpreted as em/strong delimiters\n   */\n  emStrongMask(src: string) {\n    return src;\n  }\n\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse<ParserOutput, RendererOutput> : _Parser.parseInline<ParserOutput, RendererOutput>;\n  }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults,\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MaybePromise } from './Instance.ts';\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML. Will be a Promise of string if async is set to true by any extensions.\n */\nexport function marked(src: string, options: MarkedOptions & { async: false }): string;\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\nexport function marked(src: string, options?: MarkedOptions | null): string | Promise<string>;\nexport function marked(src: string, opt?: MarkedOptions | null): string | Promise<string> {\n  return markedInstance.parse(src, opt);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './Tokens.ts';\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, Tokens, TokensList } from './Tokens.ts';\n\nexport type MaybePromise = void | Promise<void>;\n\ntype UnknownFunction = (...args: unknown[]) => unknown;\ntype GenericRendererFunction = (...args: unknown[]) => string | false;\n\nexport class Marked<ParserOutput = string, RendererOutput = string> {\n  defaults = _getDefaults<ParserOutput, RendererOutput>();\n  options = this.setOptions;\n\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n\n  Parser = _Parser<ParserOutput, RendererOutput>;\n  Renderer = _Renderer<ParserOutput, RendererOutput>;\n  TextRenderer = _TextRenderer<RendererOutput>;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer<ParserOutput, RendererOutput>;\n  Hooks = _Hooks<ParserOutput, RendererOutput>;\n\n  constructor(...args: MarkedExtension<ParserOutput, RendererOutput>[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n    let values: MaybePromise[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          const tableToken = token as Tokens.Table;\n          for (const cell of tableToken.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of tableToken.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          const listToken = token as Tokens.List;\n          values = values.concat(this.walkTokens(listToken.items, callback));\n          break;\n        }\n        default: {\n          const genericToken = token as Tokens.Generic;\n          if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n              const tokens = genericToken[childTokens].flat(Infinity) as Token[] | TokensList;\n              values = values.concat(this.walkTokens(tokens, callback));\n            });\n          } else if (genericToken.tokens) {\n            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension<ParserOutput, RendererOutput>[]) {\n    const extensions: MarkedOptions<ParserOutput, RendererOutput>['extensions'] = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions<ParserOutput, RendererOutput>;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer<ParserOutput, RendererOutput>(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if (['options', 'parser'].includes(prop)) {\n            // ignore options property\n            continue;\n          }\n          const rendererProp = prop as Exclude<keyof _Renderer<ParserOutput, RendererOutput>, 'options' | 'parser'>;\n          const rendererFunc = pack.renderer[rendererProp] as GenericRendererFunction;\n          const prevRenderer = renderer[rendererProp] as GenericRendererFunction;\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[rendererProp] = (...args: unknown[]) => {\n            let ret = rendererFunc.apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return (ret || '') as RendererOutput;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer<ParserOutput, RendererOutput>(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if (['options', 'rules', 'lexer'].includes(prop)) {\n            // ignore options, rules, and lexer properties\n            continue;\n          }\n          const tokenizerProp = prop as Exclude<keyof _Tokenizer<ParserOutput, RendererOutput>, 'options' | 'rules' | 'lexer'>;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp] as UnknownFunction;\n          const prevTokenizer = tokenizer[tokenizerProp] as UnknownFunction;\n          // Replace tokenizer with func to run extension, but fall back if false\n          // @ts-expect-error cannot type tokenizer function dynamically\n          tokenizer[tokenizerProp] = (...args: unknown[]) => {\n            let ret = tokenizerFunc.apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks<ParserOutput, RendererOutput>();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if (['options', 'block'].includes(prop)) {\n            // ignore options and block properties\n            continue;\n          }\n          const hooksProp = prop as Exclude<keyof _Hooks<ParserOutput, RendererOutput>, 'options' | 'block'>;\n          const hooksFunc = pack.hooks[hooksProp] as UnknownFunction;\n          const prevHook = hooks[hooksProp] as UnknownFunction;\n          if (_Hooks.passThroughHooks.has(prop)) {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (arg: unknown) => {\n              if (this.defaults.async && _Hooks.passThroughHooksRespectAsync.has(prop)) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (...args: unknown[]) => {\n              let ret = hooksFunc.apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: MaybePromise[] = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  lexer(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    return _Lexer.lex(src, options ?? this.defaults);\n  }\n\n  parser(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    return _Parser.parse<ParserOutput, RendererOutput>(tokens, options ?? this.defaults);\n  }\n\n  private parseMarkdown(blockType: boolean) {\n    type overloadedParse = {\n      (src: string, options: MarkedOptions<ParserOutput, RendererOutput> & { async: true }): Promise<ParserOutput>;\n      (src: string, options: MarkedOptions<ParserOutput, RendererOutput> & { async: false }): ParserOutput;\n      (src: string, options?: MarkedOptions<ParserOutput, RendererOutput> | null): ParserOutput | Promise<ParserOutput>;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parse: overloadedParse = (src: string, options?: MarkedOptions<ParserOutput, RendererOutput> | null): any => {\n      const origOpt = { ...options };\n      const opt = { ...this.defaults, ...origOpt };\n\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n\n      // throw error if an extension set async to true but parse was called with async: false\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n      }\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n\n      const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n      const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src) as string;\n        }\n        let tokens = lexer(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch(e) {\n        return throwError(e as Error);\n      }\n    };\n\n    return parse;\n  }\n\n  private onError(silent: boolean, async: boolean) {\n    return (e: Error): string | Promise<string> => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n}\n"],"names":["L","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","O","G","l","E","exec","h","e","arguments","length","undefined","t","source","n","replace","r","i","s","m","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","concat","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","C","j","se","ie","Te","F","Q","ye","Pe","v","U","Se","oe","K","blockquote","code","def","fences","heading","hr","html","lheading","list","newline","paragraph","table","text","re","_e","_objectSpread","Le","ae","D","W","le","Ee","ue","pe","qe","ve","ce","De","He","Ze","Ge","Ne","je","Fe","q","Qe","he","de","X","_backpedal","anyPunctuation","autolink","blockSkip","br","del","emStrongLDelim","emStrongRDelimAst","emStrongRDelimUnd","escape","link","nolink","punctuation","reflink","reflinkSearch","tag","url","Ke","N","We","I","normal","M","Xe","ke","w","test","J","encodeURI","_unused","V","_n$at","o","a","u","split","trim","shift","at","pop","splice","push","z","charAt","slice","fe","href","title","other","state","inLink","type","raw","tokens","inlineTokens","y","constructor","_defineProperty","this","options","space","rules","block","codeBlockStyle","match","map","join","Je","lang","inline","depth","lexer","p","c","f","top","blockTokens","k","x","g","T","substring","ordered","start","loose","items","H","repeat","trimStart","search","ee","te","ne","me","A","Z","Y","task","checked","trimEnd","filter","some","pre","toLowerCase","_t$","header","align","rows","inRawBlock","indexOf","ge","emStrong","lastIndex","index","codespan","_this$rules$inline$_b","_this$rules$inline$_b2","inlineText","escaped","b","links","Object","create","inlineQueue","lex","lexInline","src","_this$options$extensi","_this$options$extensi2","call","endsWith","startBlock","forEach","charCodeAt","console","error","Error","_this$options$hooks$e","_this$options$hooks","keys","includes","lastIndexOf","emStrongMask","_this$options$extensi3","_this$options$extensi4","startInline","P","_ref","_match","_ref2","parser","parse","_ref3","_ref4","parseInline","listitem","_e$tokens$","checkbox","unshift","_ref5","_ref6","tablecell","tablerow","_ref7","strong","_ref8","em","_ref9","_ref0","_ref1","_ref10","image","_ref11","textRenderer","$","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","R","_this$options$extensi5","renderers","_this$options$extensi6","S","_Class3","preprocess","postprocess","processAllTokens","provideLexer","provideParser","Set","_","setOptions","parseMarkdown","use","_this$defaults$extens","defaults","childTokens","flat","_len","Array","_key","name","_len2","_key2","apply","level","_len3","_key3","_len4","_key4","passThroughHooks","has","passThroughHooksRespectAsync","Promise","resolve","then","_len5","_key5","onError","prototype","toString","all","catch","message","reject","d","getDefaults","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks"],"sourceRoot":""}